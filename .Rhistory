data(DIVIPOLA_table)
data(DIVIPOLA_table.RData)
load("~/GitHub/epiCo/data/DIVIPOLA_table.RData")
View(DIVIPOLA_table)
epiGeoRef <- data.frame("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
View(epiGeoRef)
epiGeoRef <- data.frame("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
epiGeoRef <- data.frame(c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD"))
epiGeoRef <- data.frame("NOM_MPIO"=NULL, "COD_MPIO"=NULL, "LATITUD"=NULL, "LONGITUD"=NULL)
output_df <- data.frame()
colnames(output_df) <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
output_df <- data.frame(matrix(nrow=0, ncol = 4)
colnames(output_df) <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
output_df <- data.frame(matrix(nrow=0, ncol = 4))
colnames(output_df) <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
View(output_df)
query_labels <- "COD_MPIO"
output_df <- output_df[,-c(query_labels)]
output_df <- output_df[,-query_labels]
output_df <- subset(output_df, select = -c(query_labels))
output_df <- output_df[, !colnames(output_df) %in% query_labels)
output_df[, !colnames(output_df) %in% query_labels)
output_df <- output_df[, !colnames(output_df) %in% query_labels]
View(output_df)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
output_labels <- output_labels[, !colnames(output_df) %in% query_labels]
output_labels <- output_labels[, !output_labels %in% query_labels]
output_labels <- output_labels[!output_labels %in% query_labels]
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
output_labels <- output_labels[!output_labels %in% query_labels]
query_vector <- DIVIPOLA_table$COD_MPIO[1:10]
query_labels <- colnames(query_vector)
query_vector <- as.data.frame(DIVIPOLA_table$COD_MPIO[1:10])
View(query_vector)
query_vector <- as.data.frame(COD_MPIO = DIVIPOLA_table$COD_MPIO[1:10])
colnames(query_vector) <- "COD_MPIO"
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
output_labels <- output_labels[!output_labels %in% query_labels]
epiGeoRef <- merge(query_vector, DIVIPOLA_table[,c("NOM_REG","COD_MPIO","LATITUD","LONGITUD")])
epiGeoRef <- merge(query_vector, DIVIPOLA_table)
View(epiGeoRef)
epiGeoRef <- merge(query_vector, DIVIPOLA_table[output_labels])
View(epiGeoRef)
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
output_labels <- output_labels[!output_labels %in% query_labels]
epiGeoRef <- merge(query_vector, DIVIPOLA_table[output_labels])
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
output_labels <- output_labels[!output_labels %in% query_labels]
epiGeoRef <- merge(query_vector, DIVIPOLA_table)
View(epiGeoRef)
epiGeoRef[,output_labels]
epiGeoRef <- epiGeoRef[,output_labels]
View(epiGeoRef)
load("~/GitHub/epiCo/data/DIVIPOLA_table.RData")
query_vector <- as.data.frame(COD_MPIO = DIVIPOLA_table$COD_MPIO[1:10])
query_vector <- as.data.frame(DIVIPOLA_table$COD_MPIO[1:10])
colnames(query_vector) <- "COD_MPIO"
View(query_vector)
epiGeoRef <- merge(query_vector, DIVIPOLA_table)
View(query_vector)
query_labels <- colnames(query_vector)
epiGeoRef <- merge(query_vector, DIVIPOLA_table, by = query_labels)
View(epiGeoRef)
epiGeoRef <- epiGeoRef[,output_labels]
output_labels <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
epiGeoRef <- epiGeoRef[,output_labels]
View(epiGeoRef)
query_vector <- as.data.frame(DIVIPOLA_table$NOM_MPIO[1:10])
colnames(query_vector) <- "NOM_MPIO"
View(epiGeoRef)
query_vector <- as.data.frame(DIVIPOLA_table$NOM_MPIO[1:10])
colnames(query_vector) <- "NOM_MPIO"
query_vector <- as.data.frame(DIVIPOLA_table$NOM_MPIO[10:20])
colnames(query_vector) <- "NOM_MPIO"
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LATITUD", "LONGITUD")
epiGeoRef <- merge(query_vector, DIVIPOLA_table, by = query_labels)
epiGeoRef <- epiGeoRef[,output_labels]
View(query_vector)
install.packages("geosphere")
library(geosphere)
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LONGITUD", "LATITUD")
if (query_labels == "NOM_MPIO" | query_labels == "COD_MPIO")
{
epiGeoRef <- merge(query_vector, DIVIPOLA_table, by = query_labels)
epiGeoRef <- epiGeoRef[,output_labels]
}
DIVIPOLA_table[,c("LONGITUD","LATITUD")]
query_vector <- DIVIPOLA_table[1:10,c("LONGITUD","LATITUD")]
View(query_vector)
geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
View(dist_matrix)
dist_matrix <- min(geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")]))
dist_matrix <- which(min(geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])))
dist_matrix <- find(min(geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])))
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
query_vector <- DIVIPOLA_table[1:10,c("LONGITUD","LATITUD")]*0.001
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F))
View(min.d)
query_vector <- DIVIPOLA_table[1:10,c("LONGITUD","LATITUD")]
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F))
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F)[1])
query_vector <- DIVIPOLA_table[c(1,15,20,55),c("LONGITUD","LATITUD")]
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F)[1])
DIVIPOLA_table[min.d]
min.d
DIVIPOLA_table[min.d,]
DIVIPOLA_table[min.d,output_labels]
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LONGITUD", "LATITUD")
if (query_labels == "NOM_MPIO" | query_labels == "COD_MPIO")
{
epiGeoRef <- merge(query_vector, DIVIPOLA_table, by = query_labels)
epiGeoRef <- epiGeoRef[,output_labels]
}
query_labels == "NOM_MPIO"
query_labels == "COD_MPIO"
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LONGITUD", "LATITUD")
if (query_labels == c("LONGITUD", "LATITUD"))
{
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F)[1])
epiGeoRef <- DIVIPOLA_table[min.d,output_labels]
}
query_labels == c("LONGITUD", "LATITUD")
c("LONGITUD", "LATITUD") %in% query_labels
output_labels[3,4]
output_labels[3 4]
output_labels <- c("NOM_MPIO", "COD_MPIO", "LONGITUD", "LATITUD")
output_labels[3 4]
output_labels[3]
output_labels[3,4]
output_labels[,3 4]
output_labels[,c(3 4)]
sum(query_labels == c("LONGITUD", "LATITUD"))
if ((query_labels == c("LONGITUD", "LATITUD"))=2)
if ((query_labels == c("LONGITUD", "LATITUD"))==2)
{
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F)[1])
epiGeoRef <- DIVIPOLA_table[min.d,output_labels]
}
if (sum(query_labels == c("LONGITUD", "LATITUD"))==2)
{
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F)[1])
epiGeoRef <- DIVIPOLA_table[min.d,output_labels]
}
else
{
epiGeoRef <- merge(query_vector, DIVIPOLA_table, by = query_labels)
epiGeoRef <- epiGeoRef[,output_labels]
}
if (sum(query_labels == c("LONGITUD", "LATITUD"))==2)
{
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F)[1])
epiGeoRef <- DIVIPOLA_table[min.d,output_labels]
} else {
epiGeoRef <- merge(query_vector, DIVIPOLA_table, by = query_labels)
epiGeoRef <- epiGeoRef[,output_labels]
}
View(epiGeoRef)
#' Function that complete a structure of municipality names, DIVIPOLA codes, and coordinates
#' from an input of one of these variables
#'
#' @param query A vector of DIVIPOLA codes, names or coordinates
#'
#' @return A dataframe with DIVIPOLA codes, names, longitude and latitude from the query
#' @examples
#' epigeoref(query_vector)
#' @export
#'
epigeoref <- function(query_vector) {
query_labels <- colnames(query_vector)
output_labels <- c("NOM_MPIO", "COD_MPIO", "LONGITUD", "LATITUD")
if (sum(query_labels == c("LONGITUD", "LATITUD"))==2)
{
dist_matrix <- geosphere::distm(query_vector, DIVIPOLA_table[,c("LONGITUD","LATITUD")])
min.d <- apply(dist_matrix, 1, function(x) order(x, decreasing=F)[1])
epiGeoRef <- DIVIPOLA_table[min.d,output_labels]
} else {
epiGeoRef <- merge(query_vector, DIVIPOLA_table, by = query_labels)
epiGeoRef <- epiGeoRef[,output_labels]
}
return(epiGeoRef)
}
epigeoref(query_vector)
View(DIVIPOLA_table)
epigeoref(c("CALDAS","CAICEDO","YONDO"))
query_vector <- c("CALDAS","CAICEDO","YONDO")
epigeoref(query_vector)
query_vector <- c(5467 5318 68444)
query_vector <- c(5467 5318 68444)
query_vector <- c(5467, 5318, 68444)
epigeoref(query_vector)
colnames(query_vector)
query_labels <- DIVIPOLA_table$NOM_MPIO[1]
query_labels <- DIVIPOLA_table$NOM_MPIO[1 2]
query_vector <- DIVIPOLA_table$NOM_MPIO[40:50]
epigeoref(query_vector)
query_labels <- colnames(query_vector)
query_vector <- data.frame(NOM_MPIO = c("BRICENO"))
View(query_vector)
query_vector <- data.frame(NOM_MPIO = c("BRICENO", "MEDELLIN", "PIEDECUESTA", "YOPAL"))
epigeoref(query_vector)
source("main_ColOpenData.R")
setwd(~/GitHub/TRACE_ColOpenData/)
setwd(~\GitHub\TRACE_ColOpenData/)
setwd(~\GitHub\TRACE_ColOpenData\)
setwd(~GitHub\TRACE_ColOpenData\)
setwd("~/GitHub/TRACE_ColOpenData/")
source("main_ColOpenData.R")
source("main_ColOpenData.R")
source("main_ColOpenData.R")
source("main_ColOpenData.R")
source("main_ColOpenData.R")
source("main_ColOpenData.R")
source("main_ColOpenData.R")
wd()
getwd()
source("main_ColOpenData.R")
source("main_ColOpenData.R")
# Define years and events that you want to download/process in a dataframe
years_to_preprocess <- list("2007", "2008", "2009",
"2010", "2011", "2012",
"2013", "2014", "2015",
"2016", "2017", "2018",
"2019", "2020", "2021")
events_to_preprocess <- list("DENGUE", "DENGUE GRAVE", "MORTALIDAD POR DENGUE")
save <- TRUE
# Download data from the sivigila server
downloadSivigilaData(years_to_preprocess, events_to_preprocess)
# Download data from the sivigila server
downloadSivigilaData(years_to_preprocess, events_to_preprocess)
# Preprocess Sivigila data
preprocessData(years_to_preprocess, events_to_preprocess, save)
reticulate::repl_python()
import os
import sys
file_path = os.path.join(os.path.dirname(__file__), '..')
file_dir = os.path.dirname(os.path.realpath('__file__'))
sys.path.insert(0, os.path.abspath(file_path))
quit
source("main_ColOpenData.R")
# Define years and events that you want to download/process in a dataframe
years_to_preprocess <- list("2007", "2008", "2009",
"2010", "2011", "2012",
"2013", "2014", "2015",
"2016", "2017", "2018",
"2019", "2020", "2021")
events_to_preprocess <- list("DENGUE", "DENGUE GRAVE", "MORTALIDAD POR DENGUE")
save <- TRUE
# Download data from the sivigila server
downloadSivigilaData(years_to_preprocess, events_to_preprocess)
# Download data from the sivigila server
downloadSivigilaData(years_to_preprocess, events_to_preprocess)
# Download data from the sivigila server
downloadSivigilaData(years_to_preprocess, events_to_preprocess)
downloadSivigilaData(years_to_preprocess, events_to_preprocess)
# Download data from the sivigila server
downloadSivigilaData(years_to_preprocess, events_to_preprocess)
# Download data from the sivigila server
downloadSivigilaData(years_to_preprocess, events_to_preprocess)
